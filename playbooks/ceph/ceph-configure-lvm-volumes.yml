---
###
# This playbook creates LVM volumes for Ceph and generates host inventory
# inside a OSISM-deployed Ceph cluster:
# As an operator you provide the following config and the playbook will
# configure LVM (create PVs, VGs, LVs and ceph lvm_volumes config) for you:
#
# This playbook can be used to create LVMs for deploying Ceph and
# create a lvm_volumes configuration for ceph-ansible to actually deploy
# the OSDs later.
###

- name: Ceph configure LVM
  hosts:
    - ceph-osd
  gather_facts: true
  force_handlers: true
  strategy: linear
  serial: 1
  vars:
    _ceph_configure_lvm_config_path: "/tmp/"
    _ceph_configure_lvm_config_file: "ceph-lvm-configuration.yml"
  vars_prompt:
    - name: ireallymeanit
      prompt: >
        Are you sure you want to configure Ceph LVM?
        Do you want to continue?
      default: 'no'
      private: false
  tasks:
    - name: Exit playbook, if user did not mean to configure LVM
      ansible.builtin.fail:
        msg: >
          "Exiting ceph-configure-lvm-volumes playbook, LVM was NOT configured.
           To configure Ceph LVM the node, either say 'yes' on the prompt or
           or use `-e ireallymeanit=yes` on the command line when
           invoking the playbook"
      when: ireallymeanit != 'yes'

    - name: Get extra vars for Ceph configuration
      run_once: true
      ansible.builtin.include_vars:
        file:
          "{{ configuration_directory }}\
          /environments/ceph/configuration.yml"
        name: _osds_configuration_vars
      delegate_to: "{{ groups['manager'][0] }}"

    - name: Ceph configure LVM
      block:
        - name: Get block devices
          ansible.builtin.set_fact:
            block_devices: "{{ hostvars[inventory_hostname].ansible_devices }}"

        - name: Set UUIDs for OSD VGs/LVs
          ansible.builtin.set_fact:
            _ceph_osd_devices: >-
              {{
                _ceph_osd_devices|default([]) +
                [
                  item|ansible.builtin.combine(
                  {
                    'osd_lvm_uuid':
                    lookup(
                      'community.general.random_string',
                        length = 64
                    )|ansible.builtin.to_uuid
                  }
                  )
                ]
              }}
          with_items: "{{ ceph_osd_devices }}"
          when: item.osd_lvm_uuid is not defined

        - name: Generate WAL VG names
          ansible.builtin.set_fact:
            _ceph_wal_devices: >-
              {{
              _ceph_wal_devices|default([]) +
              [
                item|ansible.builtin.combine(
                {
                  "wal_vg_name":
                  "ceph-wal-" + (
                    lookup(
                      'community.general.random_string',
                      length = 64
                    )|ansible.builtin.to_uuid
                  )
                }
                )
              ]
              }}
          with_dict: "{{ ceph_wal_devices }}"
          when: ceph_wal_devices is defined

        - name: Generate DB VG names
          ansible.builtin.set_fact:
            _ceph_db_devices: >-
              {{
              _ceph_db_devices|default([]) +
              [
                item|combine(
                {
                  "db_vg_name":
                  "ceph-db-" + (
                    lookup(
                      'community.general.random_string',
                      length = 64
                    )|ansible.builtin.to_uuid
                  )
                }
                )
              ]
              }}
          with_dict: "{{ ceph_db_devices }}"
          when: ceph_db_devices is defined

        - name: Generate shared DB/WAL VG names
          ansible.builtin.set_fact:
            _ceph_db_wal_devices: >-
              {{
              _ceph_db_wal_devices|default([]) +
              [
                item|ansible.builtin.combine(
                {
                  "db_wal_vg_name":
                  "ceph-db-wal-" + (
                    lookup(
                      'community.general.random_string',
                      length = 64
                    )|ansible.builtin.to_uuid
                  )
                }
                )
              ]
              }}
          with_dict: "{{ ceph_db_wal_devices }}"
          when: ceph_db_wal_devices is defined

        - name: Generate lvm_volumes structure
          ansible.builtin.set_fact:
            _lvm_volumes:
              - data: osd-block-foo
                data_vg: ceph-foo
                db: osd-db-foo
                db_vg: ceph-db-foo
                wal: osd-wal-foo
                wal_vg: ceph-wal-foo
              - data: osd-block-bar
                data_vg: ceph-bar
                db: osd-db-bar
                db_vg: ceph-db-bar
                wal: osd-wal-bar
                wal_vg: ceph-wal-bar
              - data: osd-block-baz
                data_vg: ceph-baz
                db: osd-db-baz
                db_vg: ceph-db-baz
                wal: osd-wal-baz
                wal_vg: ceph-wal-baz

        - name: Print ceph_osd_devices
          ansible.builtin.debug:
            var: _ceph_osd_devices
          when: _ceph_osd_devices is defined

        - name: Print WAL devices
          ansible.builtin.debug:
            var: _ceph_wal_devices
          when: _ceph_wal_devices is defined

        - name: Print DB devices
          ansible.builtin.debug:
            var: _ceph_db_devices
          when: _ceph_db_devices is defined

        - name: Print shared DB/WAL devices
          ansible.builtin.debug:
            var: _ceph_db_wal_devices
          when: _ceph_db_wal_devices is defined

        - name: Set OSD devices config data
          ansible.builtin.set_fact:
            _ceph_configure_lvm_config_data:
              ceph_osd_devices: "{{ _ceph_osd_devices }}"
              lvm_volumes: "{{ _lvm_volumes }}"

        - name: Set DB devices config data
          ansible.builtin.set_fact:
            _ceph_configure_lvm_config_data: >-
              {{
                _ceph_configure_lvm_config_data |
                ansible.builtin.combine(
                  {'ceph_db_devices': ceph_db_devices }
                )
              }}
          when: ceph_db_devices is defined

        - name: Set WAL devices config data
          ansible.builtin.set_fact:
            _ceph_configure_lvm_config_data: >-
              {{
                _ceph_configure_lvm_config_data |
                ansible.builtin.combine(
                  {'ceph_wal_devices': ceph_wal_devices }
                )
              }}
          when: ceph_wal_devices is defined

        - name: Set DB+WAL devices config data
          ansible.builtin.set_fact:
            _ceph_configure_lvm_config_data: >-
              {{
                _ceph_configure_lvm_config_data |
                ansible.builtin.combine(
                  {'ceph_db_wal_devices': ceph_db_wal_devices }
                )
              }}
          when: ceph_db_wal_devices is defined

        - name: Print configuration data
          ansible.builtin.debug:
            var: _ceph_configure_lvm_config_data
          changed_when: true
          notify:
            - Write configuration file
      # condition is for entire block
      when:
        - ceph_osd_devices is defined

  handlers:
    - name: Write configuration file
      run_once: true
      ansible.builtin.template:
        src: "templates/ceph-configure-lvm-volumes.yml.j2"
        dest: >-
          {{
             _ceph_configure_lvm_config_path +
             inventory_hostname +
             "-" +
             _ceph_configure_lvm_config_file
          }}
        mode: "u=rw,g=r,o=r"
      delegate_to: "{{ groups['manager'][0] }}"
