---
###
# This playbook creates LVM devices for Ceph from host inventory
# inside a OSISM-deployed Ceph cluster generated by the
# ceph-configure-lvm-volumes playbook or specified manually in inventory.
#
# This playbook can be used to create LVM devices for deploying Ceph
# using the lvm_volumes method used by ceph-ansible.
###

- name: Ceph create LVM devices
  hosts:
    - ceph-osd
  gather_facts: true
  force_handlers: true
  strategy: linear
  serial: 1
  vars:
    _ceph_block_vgs: {}
  vars_prompt:
    - name: ireallymeanit
      prompt: >
        Are you sure you want to create Ceph LVM devices?
        Do you want to continue?
      default: 'no'
      private: false
  tasks:
    - name: Exit playbook, if user did not mean to create LVM devices
      ansible.builtin.fail:
        msg: >
          "Exiting ceph-create-lvm-volumes playbook,
           LVM devices were NOT created.
           To create Ceph LVM devices on the node,
           either say 'yes' on the prompt or
           or use `-e ireallymeanit=yes` on the command line when
           invoking the playbook"
      when: ireallymeanit != 'yes'

    - name: Get extra vars for Ceph configuration
      run_once: true
      ansible.builtin.include_vars:
        file:
          "{{ configuration_directory }}\
          /environments/ceph/configuration.yml"
        name: _osds_configuration_vars
      delegate_to: "{{ groups['manager'][0] }}"

    - name: Ceph create LVM devices
      block:
        - name: Get block devices present on host
          ansible.builtin.set_fact:
            block_devices: "{{ hostvars[inventory_hostname].ansible_devices }}"

        # Can only create VGs when PV is known, so it must be present
        # in ceph_osd_devices and not have holders or partitions
        - name: Create dict of block VGs -> PVs from ceph_osd_devices
          ansible.builtin.set_fact:
            _ceph_block_vgs: >-
              {{
                _ceph_block_vgs|
                default({})|
                ansible.builtin.combine(
                {
                  "ceph-" + item.value.osd_lvm_uuid: "/dev/" + item.key
                }
                )
              }}
          with_dict: "{{ ceph_osd_devices }}"
          when:
            - item.value.osd_lvm_uuid is defined
            - item.key in block_devices
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

        # TODO: Replace debug with community.general.lvg
        - name: Create block VGs
          ansible.builtin.debug:
            msg: {
              pvs: "{{ _ceph_block_vgs[item.data_vg] }}",
              vg: "{{ item.data_vg }}",
              pvresize: true
            }
          with_items: "{{ lvm_volumes }}"
          when:
            - item.data_vg in _ceph_block_vgs

        # TODO: Replace debug with community.general.lvol
        - name: Create block LVs
          ansible.builtin.debug:
            msg: {
              vg: "{{ item.data_vg }}",
              lv: "{{ item.data }}",
              shrink: false,
              size: "100%VG"
            }
          with_items: "{{ lvm_volumes }}"
          when:
            - item.data_vg in _ceph_block_vgs

        # TODO: Replace debug with community.general.lvg
        - name: Create DB VGs
          ansible.builtin.debug:
            msg: {
              pvs: "{{ item.key }}",
              vg: "{{ item.value.vg_name }}",
              pvresize: true
            }
          with_dict: "{{ ceph_db_devices }}"
          when:
            - ceph_db_devices is defined
            - item.value.vg_name is defined
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

        # TODO: Replace debug with community.general.lvg
        - name: Create WAL VGs
          ansible.builtin.debug:
            msg: {
              pvs: "{{ item.key }}",
              vg: "{{ item.value.vg_name }}",
              pvresize: true
            }
          with_dict: "{{ ceph_wal_devices }}"
          when:
            - ceph_wal_devices is defined
            - item.value.vg_name is defined
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

        # TODO: Replace debug with community.general.lvg
        - name: Create DB+WAL VGs
          ansible.builtin.debug:
            msg: {
              pvs: "{{ item.key }}",
              vg: "{{ item.value.vg_name }}",
              pvresize: true
            }
          with_dict: "{{ ceph_db_wal_devices }}"
          when:
            - ceph_db_wal_devices is defined
            - item.value.vg_name is defined
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

        # Check that amount of OSDs per DB/WAL/DB+WAL VG doesn't exceed
        # the num_osds value and abort play if it does.
        - name: Prepare variables for OSD count check
          ansible.builtin.set_fact:
            _num_osds_wanted_per_db_vg: {}
            _num_osds_wanted_per_wal_vg: {}
            _num_osds_wanted_per_db_wal_vg: {}

        - name: Count OSDs put on ceph_db_devices defined in lvm_volumes
          ansible.builtin.set_fact:
            _num_osds_wanted_per_db_vg: >-
              {{
                _num_osds_wanted_per_db_vg|
                ansible.builtin.combine(
                {
                  item.db_vg:
                  1 if item.db_vg not in _num_osds_wanted_per_db_vg
                  else _num_osds_wanted_per_db_vg[item.db_vg] + 1
                }
                )
              }}
          with_items: "{{ lvm_volumes }}"
          when:
            - item.db_vg is defined
            - item.db is defined
            - item.db_vg.startswith("ceph-db-")
            - not item.db_vg.startswith("ceph-db-wal-")

        - name: Count OSDs put on ceph_wal_devices defined in lvm_volumes
          ansible.builtin.set_fact:
            _num_osds_wanted_per_wal_vg: >-
              {{
                _num_osds_wanted_per_wal_vg|
                ansible.builtin.combine(
                {
                  item.wal_vg:
                  1 if item.wal_vg not in _num_osds_wanted_per_wal_vg
                  else _num_osds_wanted_per_wal_vg[item.wal_vg] + 1
                }
                )
              }}
          with_items: "{{ lvm_volumes }}"
          when:
            - item.wal_vg is defined
            - item.wal is defined
            - item.wal_vg.startswith("ceph-wal-")

        - name: Count OSDs put on ceph_db_wal_devices defined in lvm_volumes
          ansible.builtin.set_fact:
            _num_osds_wanted_per_db_wal_vg: >-
              {{
                _num_osds_wanted_per_db_wal_vg|
                ansible.builtin.combine(
                {
                  item.wal_vg:
                  1 if item.wal_vg not in _num_osds_wanted_per_db_wal_vg
                  else _num_osds_wanted_per_db_wal_vg[item.wal_vg] + 1
                }
                )
              }}
          with_items: "{{ lvm_volumes }}"
          when:
            - item.wal_vg is defined
            - item.wal is defined
            - item.wal_vg.startswith("ceph-db-wal-")

        # Check that amount of OSDs per DB VG doesn't exceed
        # the num_osds value and abort play if it does.
        - name: Fail if number of OSDs exceeds num_osds for a DB VG
          ansible.builtin.fail:
            msg: >-
              In lvm_volumes there are more OSDs to be created for
              /dev/{{ item.key }} in ceph_db_devices than the specified
              limit.
              Configured limit {{ item.value.num_osds }},
              I counted {{ _num_osds_wanted_per_db_vg[item.value.vg_name] }}
          with_dict: "{{ ceph_db_devices }}"
          when:
            - ceph_db_devices is defined
            - item.value.vg_name in
              _num_osds_wanted_per_db_vg
            - (_num_osds_wanted_per_db_vg[item.value.vg_name]|int) >
              (item.value.num_osds|int)

        # Check that amount of OSDs per WAL VG doesn't exceed
        # the num_osds value and abort play if it does.
        - name: Fail if number of OSDs exceeds num_osds for a WAL VG
          ansible.builtin.fail:
            msg: >-
              In lvm_volumes there are more OSDs to be created for
              /dev/{{ item.key }} in ceph_wal_devices than the specified
              limit.
              Configured limit {{ item.value.num_osds }},
              I counted {{ _num_osds_wanted_per_wal_vg[item.value.vg_name] }}
          with_dict: "{{ ceph_wal_devices }}"
          when:
            - ceph_wal_devices is defined
            - item.value.vg_name in
              _num_osds_wanted_per_wal_vg
            - (_num_osds_wanted_per_wal_vg[item.value.vg_name]|int) >
              (item.value.num_osds|int)

        # Check that amount of OSDs per DB+WAL VG doesn't exceed
        # the num_osds value and abort play if it does.
        - name: Fail if number of OSDs exceeds num_osds for a DB+WAL VG
          ansible.builtin.fail:
            msg: >-
              In lvm_volumes there are more OSDs to be created for
              /dev/{{ item.key }} in ceph_db_wal_devices than the specified
              limit.
              Configured limit {{ item.value.num_osds }},
              I counted {{ _num_osds_wanted_per_db_wal_vg[item.value.vg_name] }}
          with_dict: "{{ ceph_db_wal_devices }}"
          when:
            - ceph_db_wal_devices is defined
            - item.value.vg_name in
              _num_osds_wanted_per_db_wal_vg
            - (_num_osds_wanted_per_db_wal_vg[item.value.vg_name]|int) >
              (item.value.num_osds|int)

        - name: Print number of OSDs wanted per DB VG
          ansible.builtin.debug:
            var: _num_osds_wanted_per_db_vg

        - name: Print number of OSDs wanted per WAL VG
          ansible.builtin.debug:
            var: _num_osds_wanted_per_wal_vg

        - name: Print number of OSDs wanted per DB+WAL VG
          ansible.builtin.debug:
            var: _num_osds_wanted_per_db_wal_vg

        # TODO: Calculate DB LV sizes for LVs on ceph_db_devices
        #       considering "db_size" if specified manually either in
        #       "ceph_osd_devices" or in "ceph_db_devices", also
        #       considering "ceph_osd_db_wal_devices_buffer_space_percent"
        #       if not set to false

        # TODO: Calculate WAL LV sizes for LVs on ceph_wal_devices
        #       considering "wal_size" if specified manually either in
        #       "ceph_osd_devices" or in "ceph_wal_devices", also
        #       considering "ceph_osd_db_wal_devices_buffer_space_percent"
        #       if not set to false

        # TODO: Calculate DB LV sizes for LVs on ceph_db_wal_devices
        #       considering "db_size" if specified manually either in
        #       "ceph_osd_devices" or in "ceph_db_wal_devices", also
        #       considering "ceph_osd_db_wal_devices_buffer_space_percent"
        #       if not set to false

        # TODO: Calculate WAL LV sizes for LVs on ceph_db_wal_devices
        #       considering "wal_size" if specified manually either in
        #       "ceph_osd_devices" or in "ceph_db_wal_devices", also
        #       considering "ceph_osd_db_wal_devices_buffer_space_percent"
        #       if not set to false

        # TODO: Check that combined size of DB LVs on ceph_db_devies
        #       won't exceed available space and abort play
        #       if it would exceed available space.

        # TODO: Check that combined size of WAL LVs on ceph_wal_devies
        #       won't exceed available space and abort play
        #       if it would exceed available space.

        # TODO: Check that combined size of DB+WAL LVs on ceph_db_wal_devices
        #       won't exceed available space of the VG and abort play
        #       if it would exceed available space.

        # TODO: Create DB LVs for ceph_db_devices

        # TODO: Create WAL LVs for ceph_wal_devices

        # TODO: Create WAL LVs for ceph_db_wal_devices

        # TODO: Create DB LVs for ceph_db_wal_devices

        # TODO: Check that all defined LVs and VGs in lvm_volumes exist
        #       and warn the operator if something is missing.
        - name: Get list of Ceph LVs with associated VGs
          become: true
          ansible.builtin.command:
            argv:
              - "lvs"
              - "--options"
              - "lv_name,vg_name"
              - "--quiet"
              - "--noheadings"
              - "--reportformat"
              - "json"
              - "--select"
              - 'vg_name =~ ceph-.*'
          changed_when: false
          register: _lvs_cmd_output

        - name: Get list of Ceph PVs with associated VGs
          become: true
          ansible.builtin.command:
            argv:
              - "pvs"
              - "--options"
              - "pv_name,vg_name"
              - "--quiet"
              - "--noheadings"
              - "--reportformat"
              - "json"
              - "--select"
              - 'vg_name =~ ceph-.*'
          changed_when: false
          register: _pvs_cmd_output

        - name: Combine JSON from _lvs_cmd_output/_pvs_cmd_output
          ansible.builtin.set_fact:
            lvm_report: >-
              {{
                (_lvs_cmd_output.stdout | from_json).report|
                ansible.builtin.combine(
                  (_pvs_cmd_output.stdout | from_json).report
                )
              }}

        - name: Print LVM report data
          ansible.builtin.debug:
            var: lvm_report

      # condition is for entire block
      when:
        - ceph_osd_devices is defined
        - lvm_volumes is defined
