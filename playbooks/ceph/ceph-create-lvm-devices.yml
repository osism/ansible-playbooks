---
###
# This playbook creates LVM devices for Ceph from host inventory
# inside a OSISM-deployed Ceph cluster generated by the
# ceph-configure-lvm-volumes playbook or specified manually in inventory.
#
# This playbook can be used to create LVM devices for deploying Ceph
# using the lvm_volumes method used by ceph-ansible.
###

- name: Ceph create LVM devices
  hosts:
    - ceph-osd
  gather_facts: true
  force_handlers: true
  strategy: linear
  serial: 1
  vars:
    _ceph_block_vgs: {}
  vars_prompt:
    - name: ireallymeanit
      prompt: >
        Are you sure you want to create Ceph LVM devices?
        Do you want to continue?
      default: 'no'
      private: false
  tasks:
    - name: Exit playbook, if user did not mean to create LVM devices
      ansible.builtin.fail:
        msg: >
          "Exiting ceph-create-lvm-volumes playbook,
           LVM devices were NOT created.
           To create Ceph LVM devices on the node,
           either say 'yes' on the prompt or
           or use `-e ireallymeanit=yes` on the command line when
           invoking the playbook"
      when: ireallymeanit != 'yes'

    - name: Get extra vars for Ceph configuration
      run_once: true
      ansible.builtin.include_vars:
        file:
          "{{ configuration_directory }}\
          /environments/ceph/configuration.yml"
        name: _osds_configuration_vars
      delegate_to: "{{ groups['manager'][0] }}"

    - name: Ceph create LVM devices
      block:
        - name: Get block devices present on host
          ansible.builtin.set_fact:
            block_devices: "{{ hostvars[inventory_hostname].ansible_devices }}"

        # Can only create VGs when PV is known, so it must be present
        # in ceph_osd_devices and not have holders or partitions
        - name: Create dict of block VGs -> PVs from ceph_osd_devices
          ansible.builtin.set_fact:
            _ceph_block_vgs: >-
              {{
                _ceph_block_vgs|
                default({})|
                ansible.builtin.combine(
                {
                  "ceph-" + item.value.osd_lvm_uuid: "/dev/" + item.key
                }
                )
              }}
          with_dict: "{{ ceph_osd_devices }}"
          when:
            - item.value.osd_lvm_uuid is defined
            - item.key in block_devices
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

        # TODO: Replace debug with community.general.lvg
        - name: Create block VGs
          ansible.builtin.debug:
            msg: {
              pvs: "{{ _ceph_block_vgs[item.data_vg] }}",
              vg: "{{ item.data_vg }}",
              pvresize: true
            }
          with_items: "{{ lvm_volumes }}"
          when:
            - item.data_vg in _ceph_block_vgs

        # TODO: Replace debug with community.general.lvol
        - name: Create block LVs
          ansible.builtin.debug:
            msg: {
              vg: "{{ item.data_vg }}",
              lv: "{{ item.data }}",
              shrink: false,
              size: "100%VG"
            }
          with_items: "{{ lvm_volumes }}"
          when:
            - item.data_vg in _ceph_block_vgs

        # TODO: Replace debug with community.general.lvg
        - name: Create DB VGs
          ansible.builtin.debug:
            msg: {
              pvs: "{{ item.key }}",
              vg: "{{ item.value.vg_name }}",
              pvresize: true
            }
          with_dict: "{{ ceph_db_devices }}"
          when:
            - ceph_db_devices is defined
            - item.value.vg_name is defined
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

        # TODO: Replace debug with community.general.lvg
        - name: Create WAL VGs
          ansible.builtin.debug:
            msg: {
              pvs: "{{ item.key }}",
              vg: "{{ item.value.vg_name }}",
              pvresize: true
            }
          with_dict: "{{ ceph_wal_devices }}"
          when:
            - ceph_wal_devices is defined
            - item.value.vg_name is defined
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

        # TODO: Replace debug with community.general.lvg
        - name: Create DB+WAL VGs
          ansible.builtin.debug:
            msg: {
              pvs: "{{ item.key }}",
              vg: "{{ item.value.vg_name }}",
              pvresize: true
            }
          with_dict: "{{ ceph_db_wal_devices }}"
          when:
            - ceph_db_wal_devices is defined
            - item.value.vg_name is defined
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

      # TODO: Calculate DB LV sizes for LVs on ceph_db_devices
      #       considering ceph_osd_db_wal_devices_buffer_space_percent
      #       if not set to false
      # TODO: Calculate DB LV sizes for LVs on ceph_db_wal_devices
      #       considering ceph_osd_db_wal_devices_buffer_space_percent
      #       if not set to false and considering space needed for WAL LVs
      # TODO: Check that amount of OSDs per DB VG doesn't exceed
      #       the num_osds value
      # TODO: Check that combined size of LVs won't exceed available space
      # TODO: Create DB LVs for ceph_db_devices
      # TODO: Create WAL LVs for ceph_wal_devices
      # TODO: Create WAL LVs for ceph_db_wal_devices
      # TODO: Create DB LVs for ceph_db_wal_devices
      # TODO: Check that all defined LVs and VGs in lvm_volumes exist
      #       and warn the operator if something is wrong.

      # condition is for entire block
      when:
        - ceph_osd_devices is defined
        - lvm_volumes is defined
