---
###
# This playbook creates LVM devices for Ceph from host inventory
# inside a OSISM-deployed Ceph cluster generated by the
# ceph-configure-lvm-volumes playbook or specified manually in inventory.
#
# This playbook can be used to create LVM devices for deploying Ceph
# using the lvm_volumes method used by ceph-ansible.
#
# USAGE:
# 1. Make sure the configuration is provided, e.g. using
#    the ceph-configure-lvm-volumes playbook.
#    (See usage / how-to inside the playbook or OSISM documentation.)
# 2. Run this playbook:
#    `osism apply ceph-create-lvm-devices -e ireallymeanit=yes`
###

# TODO: Add support for multiple OSDs on one device

- name: Ceph create LVM devices
  hosts:
    - ceph-osd
  gather_facts: true
  force_handlers: true
  strategy: linear
  serial: 1
  vars:
    _ceph_block_vgs: {}
  vars_prompt:
    - name: ireallymeanit
      prompt: >
        Are you sure you want to create Ceph LVM devices?
        Do you want to continue?
      default: 'no'
      private: false
  tasks:
    - name: Exit playbook, if user did not mean to create LVM devices
      ansible.builtin.fail:
        msg: >-
          Exiting ceph-create-lvm-volumes playbook,
          LVM devices were NOT created.
          To create Ceph LVM devices on the node,
          either say 'yes' on the prompt
          or use `-e ireallymeanit=yes` on the command line when
          invoking the playbook
      when: ireallymeanit != 'yes'

    - name: Get extra vars for Ceph configuration
      run_once: true
      ansible.builtin.include_vars:
        file:
          "{{ configuration_directory }}\
          /environments/ceph/configuration.yml"
        name: _osds_configuration_vars
      delegate_to: "{{ groups['manager'][0] }}"

    - name: Ceph create LVM devices
      block:  # noqa: osism-fqcn
        - name: Get block devices present on host
          ansible.builtin.set_fact:
            block_devices:
              "{{ hostvars[inventory_hostname].ansible_devices }}"

        # Can only create VGs when PV is known, so it MUST be present
        # in ceph_osd_devices and MUST NOT have holders or partitions
        - name: Create dict of block VGs -> PVs from ceph_osd_devices
          ansible.builtin.set_fact:
            _ceph_block_vgs: >-
              {{
                _ceph_block_vgs|
                default({})|
                ansible.builtin.combine(
                {
                  "ceph-" + item.value.osd_lvm_uuid: "/dev/" + item.key
                }
                )
              }}
          with_dict: "{{ ceph_osd_devices }}"
          when:
            - item.value.osd_lvm_uuid is defined
            - item.key in block_devices
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

        # Create block VGs
        - name: Create block VGs
          become: true
          community.general.lvg:
            pvs: "{{ _ceph_block_vgs[item.data_vg] }}"
            vg: "{{ item.data_vg }}"
            pvresize: true
          with_items: "{{ lvm_volumes }}"
          when:
            - item.data_vg in _ceph_block_vgs

        # Create block LVs
        - name: Create block LVs
          become: true
          community.general.lvol:
            vg: "{{ item.data_vg }}"
            lv: "{{ item.data }}"
            shrink: false
            size: "100%VG"
          with_items: "{{ lvm_volumes }}"
          when:
            - item.data_vg in _ceph_block_vgs

        - name: Create DB VGs
          become: true
          community.general.lvg:
            pvs: "/dev/{{ item.key }}"
            vg: "{{ item.value.vg_name }}"
            pvresize: true
          with_dict: "{{ ceph_db_devices }}"
          when:
            - ceph_db_devices is defined
            - item.value.vg_name is defined
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

        - name: Create WAL VGs
          become: true
          community.general.lvg:
            pvs: "/dev/{{ item.key }}"
            vg: "{{ item.value.vg_name }}"
            pvresize: true
          with_dict: "{{ ceph_wal_devices }}"
          when:
            - ceph_wal_devices is defined
            - item.value.vg_name is defined
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

        - name: Create DB+WAL VGs
          become: true
          community.general.lvg:
            pvs: "/dev/{{ item.key }}"
            vg: "{{ item.value.vg_name }}"
            pvresize: true
          with_dict: "{{ ceph_db_wal_devices }}"
          when:
            - ceph_db_wal_devices is defined
            - item.value.vg_name is defined
            - block_devices[item.key].holders|length == 0
            - block_devices[item.key].partitions|length == 0

        # Check that amount of OSDs per DB/WAL/DB+WAL VG doesn't exceed
        # the num_osds value and abort play if it does.
        - name: Prepare variables for OSD count check
          ansible.builtin.set_fact:
            _num_osds_wanted_per_db_vg: {}
            _num_osds_wanted_per_wal_vg: {}
            _num_osds_wanted_per_db_wal_vg: {}

        - name: Count OSDs put on ceph_db_devices defined in lvm_volumes
          ansible.builtin.set_fact:
            _num_osds_wanted_per_db_vg: >-
              {{
                _num_osds_wanted_per_db_vg|
                ansible.builtin.combine(
                {
                  item.db_vg:
                  1 if item.db_vg not in _num_osds_wanted_per_db_vg
                  else _num_osds_wanted_per_db_vg[item.db_vg] + 1
                }
                )
              }}
          with_items: "{{ lvm_volumes }}"
          when:
            - item.db_vg is defined
            - item.db is defined
            - item.db_vg.startswith("ceph-db-")
            - not item.db_vg.startswith("ceph-db-wal-")

        - name: Count OSDs put on ceph_wal_devices defined in lvm_volumes
          ansible.builtin.set_fact:
            _num_osds_wanted_per_wal_vg: >-
              {{
                _num_osds_wanted_per_wal_vg|
                ansible.builtin.combine(
                {
                  item.wal_vg:
                  1 if item.wal_vg not in _num_osds_wanted_per_wal_vg
                  else _num_osds_wanted_per_wal_vg[item.wal_vg] + 1
                }
                )
              }}
          with_items: "{{ lvm_volumes }}"
          when:
            - item.wal_vg is defined
            - item.wal is defined
            - item.wal_vg.startswith("ceph-wal-")

        - name: Count OSDs put on ceph_db_wal_devices defined in lvm_volumes
          ansible.builtin.set_fact:
            _num_osds_wanted_per_db_wal_vg: >-
              {{
                _num_osds_wanted_per_db_wal_vg|
                ansible.builtin.combine(
                {
                  item.wal_vg:
                  1 if item.wal_vg not in _num_osds_wanted_per_db_wal_vg
                  else _num_osds_wanted_per_db_wal_vg[item.wal_vg] + 1
                }
                )
              }}
          with_items: "{{ lvm_volumes }}"
          when:
            - item.wal_vg is defined
            - item.wal is defined
            - item.wal_vg.startswith("ceph-db-wal-")

        # Check that amount of OSDs per DB VG doesn't exceed
        # the num_osds value and abort play if it does.
        - name: Fail if number of OSDs exceeds num_osds for a DB VG
          ansible.builtin.fail:
            msg: >-
              In lvm_volumes there are more OSDs to be created for
              /dev/{{ item.key }} in ceph_db_devices than the specified
              limit.
              Configured limit {{ item.value.num_osds }},
              I counted {{ _num_osds_wanted_per_db_vg[item.value.vg_name] }}
          with_dict: "{{ ceph_db_devices }}"
          when:
            - ceph_db_devices is defined
            - item.value.vg_name in
              _num_osds_wanted_per_db_vg
            - (_num_osds_wanted_per_db_vg[item.value.vg_name]|int) >
              (item.value.num_osds|int)

        # Check that amount of OSDs per WAL VG doesn't exceed
        # the num_osds value and abort play if it does.
        - name: Fail if number of OSDs exceeds num_osds for a WAL VG
          ansible.builtin.fail:
            msg: >-
              In lvm_volumes there are more OSDs to be created for
              /dev/{{ item.key }} in ceph_wal_devices than the specified
              limit.
              Configured limit {{ item.value.num_osds }},
              I counted {{ _num_osds_wanted_per_wal_vg[item.value.vg_name] }}
          with_dict: "{{ ceph_wal_devices }}"
          when:
            - ceph_wal_devices is defined
            - item.value.vg_name in
              _num_osds_wanted_per_wal_vg
            - (_num_osds_wanted_per_wal_vg[item.value.vg_name]|int) >
              (item.value.num_osds|int)

        # Check that amount of OSDs per DB+WAL VG doesn't exceed
        # the num_osds value and abort play if it does.
        - name: Fail if number of OSDs exceeds num_osds for a DB+WAL VG
          ansible.builtin.fail:
            msg: >-
              In lvm_volumes there are more OSDs to be created for
              /dev/{{ item.key }} in ceph_db_wal_devices than the specified
              limit.
              Configured limit {{ item.value.num_osds }},
              I counted {{ _num_osds_wanted_per_db_wal_vg[item.value.vg_name] }}
          with_dict: "{{ ceph_db_wal_devices }}"
          when:
            - ceph_db_wal_devices is defined
            - item.value.vg_name in
              _num_osds_wanted_per_db_wal_vg
            - (_num_osds_wanted_per_db_wal_vg[item.value.vg_name]|int) >
              (item.value.num_osds|int)

        - name: Print number of OSDs wanted per DB VG
          ansible.builtin.debug:
            verbosity: "{{ debug_verbosity | default(1) }}"
            var: _num_osds_wanted_per_db_vg

        - name: Print number of OSDs wanted per WAL VG
          ansible.builtin.debug:
            verbosity: "{{ debug_verbosity | default(1) }}"
            var: _num_osds_wanted_per_wal_vg

        - name: Print number of OSDs wanted per DB+WAL VG
          ansible.builtin.debug:
            verbosity: "{{ debug_verbosity | default(1) }}"
            var: _num_osds_wanted_per_db_wal_vg

        - name: Gather DB VGs with total and available size in bytes
          become: true
          ansible.builtin.command:
            argv:
              - "vgs"
              - "--options"
              - "vg_name,pv_name,vg_size,vg_free"
              - "--quiet"
              - "--noheadings"
              - "--nosuffix"
              - "--reportformat"
              - "json"
              - "--units"
              - "b"
              - "--select"
              - 'vg_name =~ ceph-db-.* && vg_name !~ ceph-db-wal-.*'
          changed_when: false
          register: _db_vgs_cmd_output

        - name: Gather WAL VGs with total and available size in bytes
          become: true
          ansible.builtin.command:
            argv:
              - "vgs"
              - "--options"
              - "vg_name,pv_name,vg_size,vg_free"
              - "--quiet"
              - "--noheadings"
              - "--nosuffix"
              - "--reportformat"
              - "json"
              - "--units"
              - "b"
              - "--select"
              - 'vg_name =~ ceph-wal-.*'
          changed_when: false
          register: _wal_vgs_cmd_output

        - name: Gather DB+WAL VGs with total and available size in bytes
          become: true
          ansible.builtin.command:
            argv:
              - "vgs"
              - "--options"
              - "vg_name,pv_name,vg_size,vg_free"
              - "--quiet"
              - "--noheadings"
              - "--nosuffix"
              - "--reportformat"
              - "json"
              - "--units"
              - "b"
              - "--select"
              - 'vg_name =~ ceph-db-wal-.*'
          changed_when: false
          register: _db_wal_vgs_cmd_output

        - name: Combine JSON from _db/wal/db_wal_vgs_cmd_output
          ansible.builtin.set_fact:
            vgs_report: >-
              {{
                (_db_vgs_cmd_output.stdout | from_json).report|
                ansible.builtin.combine(
                  (_wal_vgs_cmd_output.stdout | from_json).report,
                  recursive=true,
                  list_merge="append_rp"
                )|
                ansible.builtin.combine(
                  (_db_wal_vgs_cmd_output.stdout | from_json).report,
                  recursive=true,
                  list_merge="append_rp"
                )
              }}

        - name: Calculate VG sizes (without buffer)
          ansible.builtin.set_fact:
            vg_sizes: >-
              {{
                vg_sizes|default({})|
                ansible.builtin.combine({
                  item.vg_name: {
                    "vg_size": item.vg_size|int
                  }
                })
              }}
          with_items: "{{ vgs_report.vg }}"
          when:
            - ceph_osd_db_wal_devices_buffer_space_percent is not defined or
              ceph_osd_db_wal_devices_buffer_space_percent is false or
              ceph_osd_db_wal_devices_buffer_space_percent|int == 0

        - name: Calculate VG sizes (with buffer)
          ansible.builtin.set_fact:
            vg_sizes: >-
              {{
                vg_sizes|default({})|
                ansible.builtin.combine({
                  item.vg_name: {
                    "vg_size":
                    ((item.vg_size|float) *
                    (1.0 - (ceph_osd_db_wal_devices_buffer_space_percent|float) / 100.0)|
                    round(precision=1, method='floor'))|
                    int
                  }
                })
              }}
          with_items: "{{ vgs_report.vg }}"
          when:
            - ceph_osd_db_wal_devices_buffer_space_percent is defined
            - ceph_osd_db_wal_devices_buffer_space_percent is not false
            - ceph_osd_db_wal_devices_buffer_space_percent|int > 0

        - name: Print LVM VGs report data
          ansible.builtin.debug:
            verbosity: "{{ debug_verbosity | default(1) }}"
            var: vgs_report

        - name: Print LVM VG sizes
          ansible.builtin.debug:
            verbosity: "{{ debug_verbosity | default(1) }}"
            var: vg_sizes
          when: vg_sizes is defined

        # Calculate size needed for LVs on ceph_db_devices
        - name: Calculate size needed for LVs on ceph_db_devices
          ansible.builtin.set_fact:
            db_lv_sizes: >-
              {{
                db_lv_sizes|default({})|
                ansible.builtin.combine(
                {
                  item.value.vg_name: {
                    "size_available": vg_sizes[item.value.vg_name].vg_size,
                    "size_needed":
                      (item.value.db_size|human_to_bytes * item.value.num_osds)
                      if item.value.db_size is defined
                      else vg_sizes[item.value.vg_name].vg_size,
                    "size_per_db_lv":
                      (item.value.db_size|human_to_bytes)
                      if item.value.db_size is defined
                      else ((vg_sizes[item.value.vg_name].vg_size|float) /
                           (item.value.num_osds|float)|
                           round(precision=1, method='floor'))|int
                  }
                }
                )
              }}
          with_dict: "{{ ceph_db_devices }}"
          when: ceph_db_devices is defined

        # Print size needed for LVs on ceph_db_devices
        - name: Print size needed for LVs on ceph_db_devices
          ansible.builtin.debug:
            verbosity: "{{ debug_verbosity | default(1) }}"
            var: db_lv_sizes
          when: db_lv_sizes is defined

        # Fail play if combined size of DB LVs on ceph_db_devices
        # would exceed available space on VG
        - name: Fail if size of DB LVs on ceph_db_devices > available
          ansible.builtin.fail:
            msg: >-
              Combined size of LVs on DB VG {{ item.value.vg_name }}
              exceeds available capacity on VG (size available: {{
                db_lv_sizes[item.value.vg_name].size_available|
                human_readable
              }}, size needed: {{
                db_lv_sizes[item.value.vg_name].size_needed|
                human_readable
              }}, difference: {{
                (db_lv_sizes[item.value.vg_name].size_needed -
                db_lv_sizes[item.value.vg_name].size_available)|
                human_readable
              }})
          with_dict: "{{ ceph_db_devices }}"
          when:
            - ceph_db_devices is defined
            - db_lv_sizes[item.value.vg_name].size_available <
              db_lv_sizes[item.value.vg_name].size_needed

        # Calculate size needed for LVs on ceph_wal_devices
        - name: Calculate size needed for LVs on ceph_wal_devices
          ansible.builtin.set_fact:
            wal_lv_sizes: >-
              {{
                wal_lv_sizes|default({})|
                ansible.builtin.combine(
                {
                  item.value.vg_name: {
                    "size_available": vg_sizes[item.value.vg_name].vg_size,
                    "size_needed":
                      (item.value.wal_size|human_to_bytes * item.value.num_osds)
                      if item.value.wal_size is defined
                      else ("2 G"|human_to_bytes) * item.value.num_osds,
                    "size_per_wal_lv":
                      (item.value.wal_size|human_to_bytes)
                      if item.value.wal_size is defined
                      else ("2 G"|human_to_bytes)
                  }
                }
                )
              }}
          with_dict: "{{ ceph_wal_devices }}"
          when: ceph_wal_devices is defined

        # Print size needed for LVs on ceph_wal_devices
        - name: Print size needed for LVs on ceph_wal_devices
          ansible.builtin.debug:
            verbosity: "{{ debug_verbosity | default(1) }}"
            var: wal_lv_sizes
          when: wal_lv_sizes is defined

        # Fail play if combined size of WAL LVs on ceph_wal_devices
        # would exceed available space on VG
        - name: Fail if size of WAL LVs on ceph_wal_devices > available
          ansible.builtin.fail:
            msg: >-
              Combined size of LVs on WAL VG {{ item.value.vg_name }}
              exceeds available capacity on VG (size available: {{
                wal_lv_sizes[item.value.vg_name].size_available|
                human_readable
              }}, size needed: {{
                wal_lv_sizes[item.value.vg_name].size_needed|
                human_readable
              }}, difference: {{
                (wal_lv_sizes[item.value.vg_name].size_needed -
                wal_lv_sizes[item.value.vg_name].size_available)|
                human_readable
              }})
          with_dict: "{{ ceph_wal_devices }}"
          when:
            - ceph_wal_devices is defined
            - wal_lv_sizes[item.value.vg_name].size_available <
              wal_lv_sizes[item.value.vg_name].size_needed

        # Calculate size needed for LVs on ceph_db_wal_devices
        - name: Calculate size needed for WAL LVs on ceph_db_wal_devices
          ansible.builtin.set_fact:
            db_wal_wal_lv_sizes: >-
              {{
                db_wal_wal_lv_sizes|default({})|
                ansible.builtin.combine(
                {
                  item.value.vg_name: {
                    "size_available": vg_sizes[item.value.vg_name].vg_size,
                    "size_needed":
                      (item.value.wal_size|human_to_bytes * item.value.num_osds)
                      if item.value.wal_size is defined
                      else ("2 G"|human_to_bytes) * item.value.num_osds,
                    "size_per_wal_lv":
                      (item.value.wal_size|human_to_bytes)
                      if item.value.wal_size is defined
                      else ("2 G"|human_to_bytes)
                  }
                }
                )
              }}
          with_dict: "{{ ceph_db_wal_devices }}"
          when: ceph_db_wal_devices is defined

        # Print size needed for WAL LVs on ceph_db_wal_devices
        - name: Print size needed for WAL LVs on ceph_db_wal_devices
          ansible.builtin.debug:
            verbosity: "{{ debug_verbosity | default(1) }}"
            var: db_wal_wal_lv_sizes
          when: db_wal_wal_lv_sizes is defined

        # Calculate size needed for DB LVs on ceph_db_wal_devices
        - name: Calculate size needed for DB LVs on ceph_db_wal_devices
          ansible.builtin.set_fact:
            db_wal_db_lv_sizes: >-
              {{
                db_wal_db_lv_sizes|default({})|
                ansible.builtin.combine(
                {
                  item.value.vg_name: {
                    "size_available": vg_sizes[item.value.vg_name].vg_size,
                    "size_needed":
                      (item.value.db_size|human_to_bytes * item.value.num_osds)
                      if item.value.db_size is defined
                      else
                        vg_sizes[item.value.vg_name].vg_size -
                        db_wal_wal_lv_sizes[item.value.vg_name].size_needed,
                    "size_per_db_lv":
                      (item.value.db_size|human_to_bytes)
                      if item.value.db_size is defined
                      else (
                             (
                                (vg_sizes[item.value.vg_name].vg_size -
                                db_wal_wal_lv_sizes[item.value.vg_name].size_needed)|float
                              ) /
                              (item.value.num_osds|float)|
                              round(precision=1, method='floor')
                           )|
                           int
                  }
                }
                )
              }}
          with_dict: "{{ ceph_db_wal_devices }}"
          when: ceph_db_wal_devices is defined

        # Print size needed for DB LVs on ceph_db_wal_devices
        - name: Print size needed for DB LVs on ceph_db_wal_devices
          ansible.builtin.debug:
            verbosity: "{{ debug_verbosity | default(1) }}"
            var: db_wal_db_lv_sizes
          when: db_wal_db_lv_sizes is defined

        # Fail play if combined size of DB + WAL LVs on
        # ceph_db_wal_devices would exceed available space on VG
        - name: Fail if size of DB+WAL LVs on ceph_db_wal_devices > available
          ansible.builtin.fail:
            msg: >-
              Combined size of DB + WAL LVs on VG {{ item.value.vg_name }}
              exceeds available capacity on VG (size available: {{
                vg_sizes[item.value.vg_name].vg_size|
                human_readable
              }}, size needed: {{
                (db_wal_wal_lv_sizes[item.value.vg_name].size_needed +
                 db_wal_db_lv_sizes[item.value.vg_name].size_needed)|
                human_readable
              }}, difference: {{
                (
                  (db_wal_wal_lv_sizes[item.value.vg_name].size_needed +
                   db_wal_db_lv_sizes[item.value.vg_name].size_needed) -
                  vg_sizes[item.value.vg_name].vg_size
                )|
                human_readable
              }})
          with_dict: "{{ ceph_db_wal_devices }}"
          when:
            - ceph_db_wal_devices is defined
            - vg_sizes[item.value.vg_name].vg_size <
              (db_wal_wal_lv_sizes[item.value.vg_name].size_needed +
               db_wal_db_lv_sizes[item.value.vg_name].size_needed)

        # Fail if DB LV size < 30 GiB for ceph_db_devices
        - name: Fail if DB LV size < 30 GiB for ceph_db_devices
          ansible.builtin.fail:
            msg: >-
              DB LV size on VG {{ item.key }} would be
              {{ item.value.size_per_db_lv | human_readable }} which is
              less than 30 GiB, which might cause problems with
              BlueFS spillover to slower block device resulting in
              performance problems and a health warning.
              If you know what you're doing you can ignore this error
              by passing `-e ignore_db_too_small=true` when executing
              this playbook.
          with_dict: "{{ db_lv_sizes }}"
          when:
            - ceph_db_devices is defined
            - ignore_db_too_small is not defined
            - ("30 GB"|human_to_bytes) > item.value.size_per_db_lv

        # Fail if DB LV size < 30 GiB for ceph_db_wal_devices
        - name: Fail if DB LV size < 30 GiB for ceph_db_wal_devices
          ansible.builtin.fail:
            msg: >-
              DB LV size on VG {{ item.key }} would be
              {{ item.value.size_per_db_lv | human_readable }} which is
              less than 30 GiB, which might cause problems with
              BlueFS spillover to slower block device resulting in
              performance problems and a health warning.
              If you know what you're doing you can ignore this error
              by passing `-e ignore_db_too_small=true` when executing
              this playbook.
          with_dict: "{{ db_wal_db_lv_sizes }}"
          when:
            - ceph_db_wal_devices is defined
            - ignore_db_too_small is not defined
            - ("30 GB"|human_to_bytes) > item.value.size_per_db_lv

        # Create DB LVs for ceph_db_devices
        - name: Create DB LVs for ceph_db_devices
          become: true
          community.general.lvol:
            vg: "{{ item.db_vg }}"
            lv: "{{ item.db }}"
            shrink: false
            size: "{{ db_lv_sizes[item.db_vg].size_per_db_lv }}B"
          with_items: "{{ lvm_volumes }}"
          when:
            - item.db is defined
            - item.db_vg is defined
            - item.db_vg in db_lv_sizes

        # Create WAL LVs for ceph_wal_devices
        - name: Create WAL LVs for ceph_wal_devices
          become: true
          community.general.lvol:
            vg: "{{ item.wal_vg }}"
            lv: "{{ item.wal }}"
            shrink: false
            size: "{{ wal_lv_sizes[item.wal_vg].size_per_wal_lv }}B"
          with_items: "{{ lvm_volumes }}"
          when:
            - item.wal is defined
            - item.wal_vg is defined
            - item.wal_vg in wal_lv_sizes

        # Create WAL LVs for ceph_db_wal_devices
        - name: Create WAL LVs for ceph_db_wal_devices
          become: true
          community.general.lvol:
            vg: "{{ item.wal_vg }}"
            lv: "{{ item.wal }}"
            shrink: false
            size: "{{ db_wal_wal_lv_sizes[item.wal_vg].size_per_wal_lv }}B"
          with_items: "{{ lvm_volumes }}"
          when:
            - item.wal is defined
            - item.wal_vg is defined
            - item.wal_vg in db_wal_wal_lv_sizes

        # Create DB LVs for ceph_db_wal_devices
        - name: Create DB LVs for ceph_db_wal_devices
          become: true
          community.general.lvol:
            vg: "{{ item.db_vg }}"
            lv: "{{ item.db }}"
            shrink: false
            size: "{{ db_wal_db_lv_sizes[item.db_vg].size_per_db_lv }}B"
          with_items: "{{ lvm_volumes }}"
          when:
            - item.db is defined
            - item.db_vg is defined
            - item.db_vg in db_wal_db_lv_sizes

        # TODO: Check that all defined LVs and VGs in lvm_volumes exist
        #       and warn the operator if something is missing.
        - name: Get list of Ceph LVs with associated VGs
          become: true
          ansible.builtin.command:
            argv:
              - "lvs"
              - "--options"
              - "lv_name,vg_name"
              - "--quiet"
              - "--noheadings"
              - "--nosuffix"
              - "--reportformat"
              - "json"
              - "--select"
              - 'vg_name =~ ceph-.*'
          changed_when: false
          register: _lvs_cmd_output

        - name: Get list of Ceph PVs with associated VGs
          become: true
          ansible.builtin.command:
            argv:
              - "pvs"
              - "--options"
              - "pv_name,vg_name"
              - "--quiet"
              - "--noheadings"
              - "--nosuffix"
              - "--reportformat"
              - "json"
              - "--select"
              - 'vg_name =~ ceph-.*'
          changed_when: false
          register: _pvs_cmd_output

        - name: Combine JSON from _lvs_cmd_output/_pvs_cmd_output
          ansible.builtin.set_fact:
            lvm_report: >-
              {{
                (_lvs_cmd_output.stdout | from_json).report|
                ansible.builtin.combine(
                  (_pvs_cmd_output.stdout | from_json).report,
                  recursive=true,
                  list_merge="append_rp"
                )
              }}

        - name: Create list of VG/LV names
          ansible.builtin.set_fact:
            _vg_lv_names: >-
              {{
                _vg_lv_names|default([]) +
                [item.vg_name + "/" + item.lv_name]
              }}
          with_items: "{{ (_lvs_cmd_output.stdout | from_json).report[0].lv }}"

        - name: Fail if block LV defined in lvm_volumes is missing
          ansible.builtin.fail:
            msg: >-
              Missing block LV {{ item.data }} on VG {{ item.data_vg }}
          with_items: "{{ lvm_volumes }}"
          when:
            - item.data_vg + "/" + item.data not in _vg_lv_names

        - name: Fail if DB LV defined in lvm_volumes is missing
          ansible.builtin.fail:
            msg: >-
              Missing DB LV {{ item.db }} on VG {{ item.db_vg }}
          with_items: "{{ lvm_volumes }}"
          when:
            - item.db_vg + "/" + item.db not in _vg_lv_names

        - name: Fail if WAL LV defined in lvm_volumes is missing
          ansible.builtin.fail:
            msg: >-
              Missing WAL LV {{ item.wal }} on VG {{ item.wal_vg }}
          with_items: "{{ lvm_volumes }}"
          when:
            - item.wal_vg + "/" + item.wal not in _vg_lv_names

        - name: Print LVM report data
          ansible.builtin.debug:
            verbosity: "{{ debug_verbosity | default(1) }}"
            var: lvm_report

      # condition is for entire block
      when:
        - ceph_osd_devices is defined
        - lvm_volumes is defined
