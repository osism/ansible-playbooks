---
- name: Group hosts based on state bootstrap and maintenance
  ignore_unreachable: true
  hosts: "{{ hosts_maintenance | default('all') }}"
  gather_facts: false
  tasks:
    - name: Group hosts based on state bootstrap
      ansible.builtin.group_by:
        key: state_bootstrap_{{ ansible_local.osism.bootstrap.status | default("False") | bool }}
      changed_when: false

    - name: Group hosts based on state maintenance
      ansible.builtin.group_by:
        key: state_maintenance_{{ ansible_local.osism.maintenance.status | default("False") | bool }}
      changed_when: false

- name: Group hosts based on reachability
  ignore_unreachable: true
  hosts: state_bootstrap_True
  gather_facts: false
  tasks:
    - name: Check if host is reachable
      ansible.builtin.command: ping -c1 {{ inventory_hostname }}
      delegate_to: localhost
      register: result
      ignore_errors: true
      changed_when: false

    - name: Group hosts based on reachability
      ansible.builtin.group_by:
        key: reachable
      when: result is success

- name: Gather facts for all hosts
  ignore_unreachable: true
  hosts: reachable
  gather_facts: false
  strategy: "{{ osism_strategy | default('linear') }}"

  tasks:
    - name: Gathers facts about hosts
      ansible.builtin.setup:
        filter: "{{ osism_setup_filter | default('') }}"
        gather_subset: "{{ osism_setup_gather_subset | default('all') }}"

- name: Gather facts for all hosts (if using --limit)
  hosts: reachable
  gather_facts: false
  strategy: "{{ osism_strategy | default('linear') }}"
  tasks:
    - name: Gathers facts about hosts
      ansible.builtin.setup:
        filter: "{{ osism_setup_filter | default('') }}"
        gather_subset: "{{ osism_setup_gather_subset | default('all') }}"
      delegate_facts: true
      delegate_to: "{{ item }}"
      with_items: "{{ groups['reachable'] }}"
      when:
        - (play_hosts | length) != (groups['reachable'] | length)

- name: Apply maintenance roles part 1
  hosts: reachable
  serial: "{{ osism_serial_default | default(0) }}"
  strategy: "{{ osism_strategy | default('free') }}"

  roles:
    - role: osism.commons.hostname
    - role: osism.commons.hosts
    - role: osism.commons.proxy
    - role: osism.commons.resolvconf
      when: enable_resolvconf | default('true') | bool
    - role: osism.commons.repository
    - role: osism.services.rsyslog
    - role: osism.commons.systohc
    - role: osism.commons.configfs
    - role: osism.commons.packages
    - role: osism.commons.sysctl
    - role: osism.commons.limits
    - role: osism.commons.services
    - role: osism.commons.motd
    - role: osism.services.hddtemp
      when: ansible_lsb.major_release|int < 22
    - role: osism.services.rng
    - role: osism.services.smartd
    - role: osism.commons.cleanup
    - role: osism.commons.timezone
    - role: osism.services.docker
    - role: osism.commons.docker_compose
    - role: osism.commons.facts
    - role: osism.services.chrony
    - role: osism.services.lldpd

- name: Apply maintenance roles part 2
  hosts: reachable
  serial: "{{ osism_serial_default | default(0) }}"
  strategy: "{{ osism_strategy | default('free') }}"

  tasks:
    - name: Include hardening role
      ansible.builtin.include_role:
        name: hardening
        apply:
          become: true
      when: enable_hardening | default('true') | bool

- name: Apply maintenance roles part 3
  hosts: reachable
  serial: "{{ osism_serial_default | default(0) }}"
  strategy: "{{ osism_strategy | default('free') }}"

  tasks:
    - name: Include auditd role
      ansible.builtin.include_role:
        name: osism.services.auditd
      when: enable_auditd | default('true') | bool

  roles:
    - role: osism.services.journald

- name: Set state maintenance
  hosts: reachable
  serial: "{{ osism_serial_default | default(0) }}"
  gather_facts: false
  strategy: "{{ osism_strategy | default('free') }}"

  vars:
    state_maintenance_status: "False"

  tasks:
    - name: Set osism.maintenance.status fact
      ansible.builtin.include_role:
        name: osism.commons.state
      vars:
        state_name: osism
        state_section: maintenance
        state_option: status
        state_value: "{{ state_maintenance_status }}"
      when: not ansible_local.osism.maintenance.status | default("False") | bool

    - name: Set osism.maintenance.timestamp fact
      ansible.builtin.include_role:
        name: osism.commons.state
      vars:
        state_name: osism
        state_section: maintenance
        state_option: timestamp
        state_value: "{{ now(utc=True).isoformat() }}"
