---
- name: Backup mariadb
  hosts: "{{ hosts_mariadb|default('mariadb') }}"
  gather_facts: true
  serial: 1

  vars:
    mariadb_backup_directory: /opt/xtrabackup

  tasks:
    - name: Create required directories
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ operator_user }}"
        group: "{{ operator_group }}"
        mode: 0750
      loop:
        - "{{ mariadb_backup_directory }}"

    - name: Get status of mariadb container
      ansible.builtin.command: docker ps -a -f name=/mariadb -f status=running --format "{{ '{{' }}.ID{{ '}}' }}"
      register: result

    - name: Ensure mariadb container is running
      ansible.builtin.fail:
        msg: mariadb container is not running
      when: not result.stdout|length

    - name: Run innobackupex
      ansible.builtin.command: docker exec -t mariadb innobackupex --galera-info /tmp
      async: 600
      poll: 5

    - name: Get latest backup directory
      ansible.builtin.shell: |
        set -o pipefail
        docker exec -t mariadb find /tmp -name '{{ ansible_date_time.date }}*' | sort | tail -n 1
      args:
        executable: /bin/bash
      register: result

    - name: Set latest backup directory fact
      ansible.builtin.set_fact:
        mariadb_backup_directory_latest: "{{ result.stdout }}"

    - name: Ensure mariadb_backup_directory_latest is not empty
      ansible.builtin.fail:
        msg: mariadb_backup_directory_latest is empty
      when: not mariadb_backup_directory_latest|length

    - name: Prepare backup
      ansible.builtin.command: innobackupex --apply-log {{ mariadb_backup_directory_latest }}
      async: 600
      poll: 5

    - name: Extract backup from the container
      ansible.builtin.command: "docker cp mariadb:{{ mariadb_backup_directory_latest }} {{ mariadb_backup_directory }}"

    - name: Remove backup from the container
      ansible.builtin.command: docker exec -t mariadb rm -rf {{ mariadb_backup_directory_latest }}
